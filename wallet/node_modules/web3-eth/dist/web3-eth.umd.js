(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('web3-core-helpers'), require('web3-core-subscriptions'), require('web3-eth-accounts'), require('web3-eth-ens'), require('web3-eth-contract'), require('web3-eth-personal'), require('web3-eth-abi'), require('web3-eth-iban'), require('web3-providers'), require('web3-net'), require('web3-utils'), require('@babel/runtime/regenerator'), require('@babel/runtime/helpers/asyncToGenerator'), require('eth-lib/lib/nat'), require('eth-lib/lib/bytes'), require('eth-lib/lib/hash'), require('eth-lib/lib/rlp'), require('eth-lib/lib/account'), require('@babel/runtime/helpers/createClass'), require('@babel/runtime/helpers/set'), require('@babel/runtime/helpers/get'), require('web3-core'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/possibleConstructorReturn'), require('@babel/runtime/helpers/getPrototypeOf'), require('@babel/runtime/helpers/inherits'), require('web3-core-method')) :
    typeof define === 'function' && define.amd ? define(['exports', 'web3-core-helpers', 'web3-core-subscriptions', 'web3-eth-accounts', 'web3-eth-ens', 'web3-eth-contract', 'web3-eth-personal', 'web3-eth-abi', 'web3-eth-iban', 'web3-providers', 'web3-net', 'web3-utils', '@babel/runtime/regenerator', '@babel/runtime/helpers/asyncToGenerator', 'eth-lib/lib/nat', 'eth-lib/lib/bytes', 'eth-lib/lib/hash', 'eth-lib/lib/rlp', 'eth-lib/lib/account', '@babel/runtime/helpers/createClass', '@babel/runtime/helpers/set', '@babel/runtime/helpers/get', 'web3-core', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/possibleConstructorReturn', '@babel/runtime/helpers/getPrototypeOf', '@babel/runtime/helpers/inherits', 'web3-core-method'], factory) :
    (factory((global.Web3Eth = {}),global.web3CoreHelpers,global.web3CoreSubscriptions,global.web3EthAccounts,global.web3EthEns,global.web3EthContract,global.web3EthPersonal,global.web3EthAbi,global.web3EthIban,global.web3Providers,global.web3Net,global.Utils,global._regeneratorRuntime,global._asyncToGenerator,global.Nat,global.Bytes,global.Hash,global.RLP,global.Account,global._createClass,global._set,global._get,global.web3Core,global._classCallCheck,global._possibleConstructorReturn,global._getPrototypeOf,global._inherits,global.web3CoreMethod));
}(this, (function (exports,web3CoreHelpers,web3CoreSubscriptions,web3EthAccounts,web3EthEns,web3EthContract,web3EthPersonal,web3EthAbi,web3EthIban,web3Providers,web3Net,Utils,_regeneratorRuntime,_asyncToGenerator,Nat,Bytes,Hash,RLP,Account,_createClass,_set,_get,web3Core,_classCallCheck,_possibleConstructorReturn,_getPrototypeOf,_inherits,web3CoreMethod) { 'use strict';

    _regeneratorRuntime = _regeneratorRuntime && _regeneratorRuntime.hasOwnProperty('default') ? _regeneratorRuntime['default'] : _regeneratorRuntime;
    _asyncToGenerator = _asyncToGenerator && _asyncToGenerator.hasOwnProperty('default') ? _asyncToGenerator['default'] : _asyncToGenerator;
    Nat = Nat && Nat.hasOwnProperty('default') ? Nat['default'] : Nat;
    Bytes = Bytes && Bytes.hasOwnProperty('default') ? Bytes['default'] : Bytes;
    Hash = Hash && Hash.hasOwnProperty('default') ? Hash['default'] : Hash;
    RLP = RLP && RLP.hasOwnProperty('default') ? RLP['default'] : RLP;
    Account = Account && Account.hasOwnProperty('default') ? Account['default'] : Account;
    _createClass = _createClass && _createClass.hasOwnProperty('default') ? _createClass['default'] : _createClass;
    _set = _set && _set.hasOwnProperty('default') ? _set['default'] : _set;
    _get = _get && _get.hasOwnProperty('default') ? _get['default'] : _get;
    _classCallCheck = _classCallCheck && _classCallCheck.hasOwnProperty('default') ? _classCallCheck['default'] : _classCallCheck;
    _possibleConstructorReturn = _possibleConstructorReturn && _possibleConstructorReturn.hasOwnProperty('default') ? _possibleConstructorReturn['default'] : _possibleConstructorReturn;
    _getPrototypeOf = _getPrototypeOf && _getPrototypeOf.hasOwnProperty('default') ? _getPrototypeOf['default'] : _getPrototypeOf;
    _inherits = _inherits && _inherits.hasOwnProperty('default') ? _inherits['default'] : _inherits;

    var TransactionSigner =
    function () {
      function TransactionSigner(utils, formatters) {
        _classCallCheck(this, TransactionSigner);
        this.utils = utils;
        this.formatters = formatters;
      }
      _createClass(TransactionSigner, [{
        key: "sign",
        value: function () {
          var _sign = _asyncToGenerator(
          _regeneratorRuntime.mark(function _callee(transaction, privateKey) {
            var rlpEncoded, hash, signature, rawTransaction, values;
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    if (privateKey) {
                      _context.next = 2;
                      break;
                    }
                    throw new Error('No privateKey given to the TransactionSigner.');
                  case 2:
                    if (privateKey.startsWith('0x')) {
                      privateKey = privateKey.substring(2);
                    }
                    transaction = this.formatters.txInputFormatter(transaction);
                    transaction.to = transaction.to || '0x';
                    transaction.data = transaction.data || '0x';
                    transaction.value = transaction.value || '0x';
                    transaction.chainId = this.utils.numberToHex(transaction.chainId);
                    rlpEncoded = this.createRlpEncodedTransaction(transaction);
                    hash = Hash.keccak256(rlpEncoded);
                    signature = this.createAccountSignature(hash, privateKey, transaction.chainId);
                    rawTransaction = RLP.encode(this.mapRlpEncodedTransaction(rlpEncoded, signature));
                    values = RLP.decode(rawTransaction);
                    return _context.abrupt("return", {
                      messageHash: hash,
                      v: this.trimLeadingZero(values[6]),
                      r: this.trimLeadingZero(values[7]),
                      s: this.trimLeadingZero(values[8]),
                      rawTransaction: rawTransaction
                    });
                  case 14:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));
          return function sign(_x, _x2) {
            return _sign.apply(this, arguments);
          };
        }()
      }, {
        key: "createRlpEncodedTransaction",
        value: function createRlpEncodedTransaction(transaction) {
          return RLP.encode([Bytes.fromNat(transaction.nonce), Bytes.fromNat(transaction.gasPrice), Bytes.fromNat(transaction.gas), transaction.to.toLowerCase(), Bytes.fromNat(transaction.value), transaction.data, Bytes.fromNat(transaction.chainId), '0x', '0x']);
        }
      }, {
        key: "createAccountSignature",
        value: function createAccountSignature(hash, privateKey, chainId) {
          return Account.makeSigner(Nat.toNumber(chainId) * 2 + 35)(hash, privateKey);
        }
      }, {
        key: "mapRlpEncodedTransaction",
        value: function mapRlpEncodedTransaction(rlpEncoded, signature) {
          var rawTransaction = RLP.decode(rlpEncoded).slice(0, 6).concat(Account.decodeSignature(signature));
          rawTransaction[6] = this.makeEven(this.trimLeadingZero(rawTransaction[6]));
          rawTransaction[7] = this.makeEven(this.trimLeadingZero(rawTransaction[7]));
          rawTransaction[8] = this.makeEven(this.trimLeadingZero(rawTransaction[8]));
          return rawTransaction;
        }
      }, {
        key: "trimLeadingZero",
        value: function trimLeadingZero(hex) {
          while (hex && hex.startsWith('0x0')) {
            hex = "0x".concat(hex.slice(3));
          }
          return hex;
        }
      }, {
        key: "makeEven",
        value: function makeEven(hex) {
          if (hex.length % 2 === 1) {
            hex = hex.replace('0x', '0x0');
          }
          return hex;
        }
      }]);
      return TransactionSigner;
    }();

    var Eth =
    function (_AbstractWeb3Module) {
      _inherits(Eth, _AbstractWeb3Module);
      function Eth(provider, providersModuleFactory, methodModuleFactory, methodFactory, net, accounts, personal, Iban, abiCoder, ens, utils, formatters, subscriptionsFactory, contractModuleFactory, transactionSigner, options, nodeNet) {
        var _this;
        _classCallCheck(this, Eth);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(Eth).call(this, provider, providersModuleFactory, methodModuleFactory, methodFactory, options, nodeNet));
        _this.net = net;
        _this.accounts = accounts;
        _this.personal = personal;
        _this.Iban = Iban;
        _this.abi = abiCoder;
        _this.ens = ens;
        _this.utils = utils;
        _this.formatters = formatters;
        _this.subscriptionsFactory = subscriptionsFactory;
        _this.contractModuleFactory = contractModuleFactory;
        _this.initiatedContracts = [];
        _this._transactionSigner = options.transactionSigner || transactionSigner;
        _this.Contract = function (abi, address) {
          var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
          options.transactionSigner = _this.transactionSigner;
          var contract = _this.contractModuleFactory.createContract(_this.currentProvider, _this.providersModuleFactory, _this.accounts, abi, address, options);
          _this.initiatedContracts.push(contract);
          return contract;
        };
        return _this;
      }
      _createClass(Eth, [{
        key: "clearSubscriptions",
        value: function clearSubscriptions() {
          return _get(_getPrototypeOf(Eth.prototype), "clearSubscriptions", this).call(this, 'eth_unsubscribe');
        }
      }, {
        key: "subscribe",
        value: function subscribe(type, options, callback) {
          switch (type) {
            case 'logs':
              return this.subscriptionsFactory.createLogSubscription(options, this, this.methodFactory.createMethod('getPastLogs')).subscribe(callback);
            case 'newBlockHeaders':
              return this.subscriptionsFactory.createNewHeadsSubscription(this).subscribe(callback);
            case 'pendingTransactions':
              return this.subscriptionsFactory.createNewPendingTransactionsSubscription(this).subscribe(callback);
            case 'syncing':
              return this.subscriptionsFactory.createSyncingSubscription(this).subscribe(callback);
            default:
              throw new Error("Unknown subscription: ".concat(type));
          }
        }
      }, {
        key: "setProvider",
        value: function setProvider(provider, net) {
          var setContractProviders = this.initiatedContracts.every(function (contract) {
            return contract.setProvider(provider, net);
          });
          return this.net.setProvider(provider, net) && this.personal.setProvider(provider, net) && _get(_getPrototypeOf(Eth.prototype), "setProvider", this).call(this, provider, net) && setContractProviders;
        }
      }, {
        key: "transactionSigner",
        get: function get() {
          return this._transactionSigner;
        }
        ,
        set: function set(transactionSigner) {
          this._transactionSigner = transactionSigner;
          this.accounts.transactionSigner = transactionSigner;
          this.ens.transactionSigner = transactionSigner;
          this.initiatedContracts.forEach(function (contract) {
            contract.transactionSigner = transactionSigner;
          });
        }
      }, {
        key: "defaultGasPrice",
        set: function set(value) {
          this.initiatedContracts.forEach(function (contract) {
            contract.defaultGasPrice = value;
          });
          this.net.defaultGasPrice = value;
          this.personal.defaultGasPrice = value;
          _set(_getPrototypeOf(Eth.prototype), "defaultGasPrice", value, this, true);
        }
        ,
        get: function get() {
          return _get(_getPrototypeOf(Eth.prototype), "defaultGasPrice", this);
        }
      }, {
        key: "defaultGas",
        set: function set(value) {
          this.initiatedContracts.forEach(function (contract) {
            contract.defaultGas = value;
          });
          this.net.defaultGas = value;
          this.personal.defaultGas = value;
          _set(_getPrototypeOf(Eth.prototype), "defaultGas", value, this, true);
        }
        ,
        get: function get() {
          return _get(_getPrototypeOf(Eth.prototype), "defaultGas", this);
        }
      }, {
        key: "transactionBlockTimeout",
        set: function set(value) {
          this.initiatedContracts.forEach(function (contract) {
            contract.transactionBlockTimeout = value;
          });
          this.net.transactionBlockTimeout = value;
          this.personal.transactionBlockTimeout = value;
          _set(_getPrototypeOf(Eth.prototype), "transactionBlockTimeout", value, this, true);
        }
        ,
        get: function get() {
          return _get(_getPrototypeOf(Eth.prototype), "transactionBlockTimeout", this);
        }
      }, {
        key: "transactionConfirmationBlocks",
        set: function set(value) {
          this.initiatedContracts.forEach(function (contract) {
            contract.transactionConfirmationBlocks = value;
          });
          this.net.transactionConfirmationBlocks = value;
          this.personal.transactionConfirmationBlocks = value;
          _set(_getPrototypeOf(Eth.prototype), "transactionConfirmationBlocks", value, this, true);
        }
        ,
        get: function get() {
          return _get(_getPrototypeOf(Eth.prototype), "transactionConfirmationBlocks", this);
        }
      }, {
        key: "transactionPollingTimeout",
        set: function set(value) {
          this.initiatedContracts.forEach(function (contract) {
            contract.transactionPollingTimeout = value;
          });
          this.net.transactionPollingTimeout = value;
          this.personal.transactionPollingTimeout = value;
          _set(_getPrototypeOf(Eth.prototype), "transactionPollingTimeout", value, this, true);
        }
        ,
        get: function get() {
          return _get(_getPrototypeOf(Eth.prototype), "transactionPollingTimeout", this);
        }
      }, {
        key: "defaultAccount",
        set: function set(value) {
          var _this2 = this;
          this.initiatedContracts.forEach(function (contract) {
            contract.defaultAccount = _this2.utils.toChecksumAddress(value);
          });
          this.net.defaultAccount = value;
          this.personal.defaultAccount = value;
          _set(_getPrototypeOf(Eth.prototype), "defaultAccount", value, this, true);
        }
        ,
        get: function get() {
          return _get(_getPrototypeOf(Eth.prototype), "defaultAccount", this);
        }
      }, {
        key: "defaultBlock",
        set: function set(value) {
          this.initiatedContracts.forEach(function (contract) {
            contract.defaultBlock = value;
          });
          this.net.defaultBlock = value;
          this.personal.defaultBlock = value;
          _set(_getPrototypeOf(Eth.prototype), "defaultBlock", value, this, true);
        }
        ,
        get: function get() {
          return _get(_getPrototypeOf(Eth.prototype), "defaultBlock", this);
        }
      }]);
      return Eth;
    }(web3Core.AbstractWeb3Module);

    var MethodFactory =
    function (_AbstractMethodFactor) {
      _inherits(MethodFactory, _AbstractMethodFactor);
      function MethodFactory(methodModuleFactory, utils, formatters) {
        var _this;
        _classCallCheck(this, MethodFactory);
        _this = _possibleConstructorReturn(this, _getPrototypeOf(MethodFactory).call(this, methodModuleFactory, utils, formatters));
        _this.methods = {
          getNodeInfo: web3CoreMethod.GetNodeInfoMethod,
          getProtocolVersion: web3CoreMethod.GetProtocolVersionMethod,
          getCoinbase: web3CoreMethod.GetCoinbaseMethod,
          isMining: web3CoreMethod.IsMiningMethod,
          getHashrate: web3CoreMethod.GetHashrateMethod,
          isSyncing: web3CoreMethod.IsSyncingMethod,
          getGasPrice: web3CoreMethod.GetGasPriceMethod,
          getAccounts: web3CoreMethod.GetAccountsMethod,
          getBlockNumber: web3CoreMethod.GetBlockNumberMethod,
          getBalance: web3CoreMethod.GetBalanceMethod,
          getStorageAt: web3CoreMethod.GetStorageAtMethod,
          getCode: web3CoreMethod.GetCodeMethod,
          getBlock: web3CoreMethod.GetBlockMethod,
          getUncle: web3CoreMethod.GetUncleMethod,
          getBlockTransactionCount: web3CoreMethod.GetBlockTransactionCountMethod,
          getBlockUncleCount: web3CoreMethod.GetBlockUncleCountMethod,
          getTransaction: web3CoreMethod.GetTransactionMethod,
          getTransactionFromBlock: web3CoreMethod.GetTransactionFromBlockMethod,
          getTransactionReceipt: web3CoreMethod.GetTransactionReceipt,
          getTransactionCount: web3CoreMethod.GetTransactionCountMethod,
          sendSignedTransaction: web3CoreMethod.SendRawTransactionMethod,
          signTransaction: web3CoreMethod.SignTransactionMethod,
          sendTransaction: web3CoreMethod.SendTransactionMethod,
          sign: web3CoreMethod.SignMethod,
          call: web3CoreMethod.CallMethod,
          estimateGas: web3CoreMethod.EstimateGasMethod,
          submitWork: web3CoreMethod.SubmitWorkMethod,
          getWork: web3CoreMethod.GetWorkMethod,
          getPastLogs: web3CoreMethod.GetPastLogsMethod,
          requestAccounts: web3CoreMethod.RequestAccountsMethod,
          getId: web3CoreMethod.VersionMethod,
          getChainId: web3CoreMethod.ChainIdMethod
        };
        return _this;
      }
      return MethodFactory;
    }(web3CoreMethod.AbstractMethodFactory);

    var TransactionSigner$1 = function TransactionSigner$$1() {
      return new TransactionSigner(Utils, web3CoreHelpers.formatters);
    };
    var MethodFactory$1 = function MethodFactory$$1() {
      return new MethodFactory(new web3CoreMethod.MethodModuleFactory(), Utils, web3CoreHelpers.formatters);
    };
    var Eth$1 = function Eth$$1(provider, net, options) {
      var accounts = new web3EthAccounts.Accounts(provider, options);
      var abiCoder = new web3EthAbi.AbiCoder();
      var methodModuleFactory = new web3CoreMethod.MethodModuleFactory();
      return new Eth(provider, new web3Providers.ProvidersModuleFactory(), methodModuleFactory, new MethodFactory$1(), new web3Net.Network(provider, options), accounts, new web3EthPersonal.Personal(provider, accounts, options), web3EthIban.Iban, abiCoder, new web3EthEns.Ens(provider, accounts, options), Utils, web3CoreHelpers.formatters, new web3CoreSubscriptions.SubscriptionsFactory(), new web3EthContract.ContractModuleFactory(Utils, web3CoreHelpers.formatters, abiCoder, accounts, methodModuleFactory), new TransactionSigner$1(), options, net);
    };

    exports.TransactionSigner = TransactionSigner$1;
    exports.MethodFactory = MethodFactory$1;
    exports.Eth = Eth$1;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
